Priority    To Do


2           moveString added to _trajectory
3           a way to set whether we want to print all valid trajectories on boards

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

√           fix pawn.
√           create another unusual set of move rules
√           input helper function
                args
                    flags:
                        -a: expect input from assignment description, in the order they are listed for the assignment
                            ?
                            set X (a 2D table with or without obstacles), an element p for which 
                             the trajectories should be calculated, relations of reachability for this 
                             element (if necessary*), location of the element (the start of trajectories), 
                             the end of trajectories, the length of trajectories.
                        -c: print out all valid trajectories on boards
                chess notation for move
                any locations of obstacles in chess notation
√           a way to input length (maybe review the formal grammar and consider how to pass in lengths)
√           obstactles passed into trajectory problem, into genEllipse.
√           fix results when only result is an empty board. (should be zero results);
